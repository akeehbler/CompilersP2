import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int lnum, int cnum) {
        linenum = lnum;
        charnum = cnum;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int lnum, int cnum, int val) {
        super(lnum, cnum);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int lnum, int cnum, String val) {
        super(lnum, cnum);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int lnum, int cnum, String val) {
        super(lnum, cnum);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%

DIGIT=        [0-9]
LETTER=       [a-zA-Z]
WHITESPACE=   [\040\t]
DOT=          [.]
USCORE =      [_]
COMMENTS=     ["///""###"]
ESCAPEDCHARS= ["\n""\t""\"""\?""\\""\'"]
DOUBLE_QUOTE= [\"]
BACKSLASH =   [\\]
NEWLINE =     [\n]



%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

{DIGIT}+  { // NOTE: the following computation of the integer value does NOT
            //       check for overflow.  This must be changed.
            int val = (new Integer(yytext())).intValue();
            Symbol S = new Symbol(sym.INTLITERAL,
                             new IntLitTokenVal(yyline+1, CharNum.num, val));
            CharNum.num += yytext().length();
            return S;
          }

\n        { CharNum.num = 1; }

{WHITESPACE}+  { CharNum.num += yytext().length(); }

"int"     { Symbol S = new Symbol(sym.INT, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 3;
            return S;
          }

"if"      { Symbol S = new Symbol(sym.IF, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"bool"    { Symbol S = new Symbol(sym.BOOL, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"void"    { Symbol S = new Symbol(sym.VOID, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"stuct"   { Symbol S = new Symbol(sym.STRUCT, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 5;
            return S;
          }

"receive" { Symbol S = new Symbol(sym.RECEIVE, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 7;
            return S;
          }

"print"   { Symbol S = new Symbol(sym.PRINT, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 5;
            return S;
          }

"else"   { Symbol S = new Symbol(sym.ELSE, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"while"   { Symbol S = new Symbol(sym.WHILE, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 5;
            return S;
          }

"tru"     { Symbol S = new Symbol(sym.TRUE, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 3;
            return S;
          }

"fls"     { Symbol S = new Symbol(sym.FALSE, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 3;
            return S;
          }

"ret"     { Symbol S = new Symbol(sym.RETURN, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 3;
            return S;
          }

// DELETE THIS LATER 
// These are the one or two character symbols that are tokens as well

"{"       { Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S
          }

"}"       { Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S
          }

"("       { Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S
          }

")"       { Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S
          }
  
";"       { Symbol S = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S
          }

","       { Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S
          }

"."       { Symbol S = new Symbol(sym.DOT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S
          }

"<<"      { Symbol S = new Symbol(sym.WRITE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S
          }

">>"      { Symbol S = new Symbol(sym.READ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S
          }

"++"      { Symbol S = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S
          }

"+"       { Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"--"      { Symbol S = new Symbol(sym.MINUSMINUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"-"       { Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"*"       { Symbol S = new Symbol(sym.TIMES, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"/"       { Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"!"       { Symbol S = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"&&"      { Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"||"      { Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"=="      { Symbol S = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"!="      { Symbol S = new Symbol(sym.NOTEQUALS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"<"       { Symbol S = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

">"       { Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"<="      { Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"="       { Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }


// DELETE THIS LATER
// Reserved words need to be first because if it matches another case then it will take the ones
// toward the top first. Also not sure if the identifier one is correct below. Still have to fix
// the digit issue. Also not sure if escaped characters, dot, and USCORE should be in quotes or just 
// write the macro.

({LETTER}|{USCORE})({LETTER}|{DIGIT}|{USCORE})* {
            Symbol S = new Symbol(sym.ID, new IdTokenVal(yyline+1, CharNum.num, yytext()));
            CharNum.num += yytext.length();
            return S;
          }

//DELETE THIS LATER
// This was in the skeleton code but a period is one of the characters we are supposed to handle
// I have code in the section above for a period so not sure which to keep     
.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }

