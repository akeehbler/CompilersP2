import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int lnum, int cnum) {
        linenum = lnum;
        charnum = cnum;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int lnum, int cnum, int val) {
        super(lnum, cnum);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int lnum, int cnum, String val) {
        super(lnum, cnum);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int lnum, int cnum, String val) {
        super(lnum, cnum);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%

DIGIT=        [0-9]
LETTER=       [a-zA-Z]
WHITESPACE=   [\040\t]
DOT= "."
USCORE = "_"

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

{DIGIT}+  { // NOTE: the following computation of the integer value does NOT
            //       check for overflow.  This must be changed.
            int val = (new Integer(yytext())).intValue();
            Symbol S = new Symbol(sym.INTLITERAL,
                             new IntLitTokenVal(yyline+1, CharNum.num, val));
            CharNum.num += yytext().length();
            return S;
          }

\n        { CharNum.num = 1; }

{WHITESPACE}+  { CharNum.num += yytext().length(); }

"int"     { Symbol S = new Symbol(sym.INT, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 3;
            return S;
          }

"if"      { Symbol S = new Symbol(sym.IF, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"bool"    { Symbol S = new Symbol(sym.BOOL, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"void"    { Symbol S = new Symbol(sym.VOID, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"stuct"   { Symbol S = new Symbol(sym.STRUCT, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 5;
            return S;
          }

"receive" { Symbol S = new Symbol(sym.RECEIVE, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 7;
            return S;
          }

"print"   { Symbol S = new Symbol(sym.PRINT, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 5;
            return S;
          }

"else"   { Symbol S = new Symbol(sym.ELSE, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"while"   { Symbol S = new Symbol(sym.WHILE, newTokenVal(yyline+1, CharNum.num));
            CharNum.num += 5;
            return S;
          }

// DELETE THIS LATER
// Note that we still need tru, fls, ret. Asked on Piazza about the matching token
// name for these. Was still awaiting a response when I was writing this. Also reserved
// words need to be first because if it matches another case then it will take the ones
// toward the top first. Also not sure if the identifier one is correct below.

({LETTER}|{USCORE})({LETTER}|{DIGIT}|{USCORE})* {
            Symbol S = new Symbol(sym.ID, new IdTokenVal(yyline+1, CharNum.num, yytext()));
            CharNum.num += yytext.length();
            return S;
          }

"+"       { Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }
        
.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }

